@using Microsoft.Ajax.Utilities
@model Freestyle.Models.Artist

@{
    /**/

    ViewBag.Title = Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="row">
    <div class="col-md-4">
        <section id="img"></section>
        <hr />
        <section id="score-slider">
            <h2 class="rating-avg"></h2>
            <div class="progress">
                <div class="progress-bar" id="score-progress"></div>
            </div>
        </section>
        <section id="review-stats">
            <h4>Statistics</h4>
            <div class="row"><svg width="500" height="300"></svg></div>
        </section>
        <section>
            <h4>Map</h4>
            <br />
            <div id="google-map"></div>
        </section>
        <section>
            <h4>Share on Social</h4>
            <div class="share"></div>
        </section>
        @if (Session["Role"].IfNotNull(role => role.Equals("Admin")))
        {
            <hr />
            <section>
                <h4>Admin: </h4>
                @Html.ActionLink("Edit ", "Edit", "Artist", new { id = Model.Id }, new { @class = "btn btn-outline-warning btn-block" })
                @Html.ActionLink("Delete", "Delete", "Artist", new { id = Model.Id }, new { @class = "btn btn-outline-danger btn-block" })
            </section>
        }

    </div>
    <div class="col-md-8">
        <section id="title">
            <h1>
                @Html.ActionLink(@Model.Name, "Details", "Artist", @Model.Id, null)
            </h1>
            <h5>From @Model.OriginCountry</h5>
        </section>
        <hr />
        <h3>Synopsis</h3>
        <section id="bio"></section>
        <h3>Discography</h3>
        <section>
            @Html.Action("GetDiscog", Model.Id)
        </section>
        <h3>Reviews</h3>
        <section>
            @Html.Action("GetReviewsByArtist", "Review")
        </section>
        <h3>Top Video from YouTube</h3>
        <section>
            <div class="youtube-video"></div>
        </section>

    </div>
</div>


@section Scripts
{
    <script>
        function initMap() {

            var options = {
                zoom: 3,
                center: { lat: 0, lng: 0 }
            };
            var map = new google.maps.Map(document.getElementById("google-map"), options);
            $.getJSON("https://maps.googleapis.com/maps/api/geocode/json?address=@Model.OriginCountry&key=" + GoogleKey,
                function(json) {
                    if (json.status === 'OK') {

                        var marker = new google.maps.Marker({ position: json.results[0].geometry.location, map: map });
                        map.setCenter(marker.getPosition());

                    }
                });
        }
    </script>
    <script defer async src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC6perw931as-fOkiSIsmVYyfeIwLyyur4&callback=initMap"></script>
    <script>
        var scorePercent = @Model.AvgScore * 10;
        $("#score-progress").attr("style", "width:" + scorePercent + "%");
    </script>
    <script>
        $(document).ready(function() {
            var artistName = "@Model.Name";
            var avgScore = Math.round(@Model.AvgScore * 10.0) / 10.0;
            $(".rating-avg").html("" + avgScore);

            getArtistInfo(artistName);
            getVideo("music by " + artistName);

            animateScore();
            $(".rating-avg").html("" + avgScore);
            embedTweet();
        });
    </script>
    <script type="text/javascript">
        $(document).ready(function() {
            $('#albums-table').DataTable({
                "language": {
                    "zeroRecords": 'No Matching Records Found.<br>Would You Like To @Html.ActionLink("Create a New Album", "Create", "Album", new{artistId=Model.Id}, null)?'
                },
                "columnDefs": [
                    { "targets": 2, "type": "date" },
                    { "targets": [5, 4], "type": "num" },
                    { "targets": 6, "orderable": false }
                ]

            });
            $('#review-table').DataTable({
                "language": {
                    "zeroRecords": 'No Matching Records Found.'
                },
                "columnDefs": [
                    {"targets":2, "type":"date"},
                    { "targets": 3, "type": "num" },
                    { "targets": 4, "orderable": false }
                ]

            });
        });
    </script>
    <script>
        $(document).ready(function () {
            $(".tick").each(function (index) {
                var v = $(".tick")[index].childNodes[1].childNodes[0].data.toString();
                if (v.includes(".")) {
                    $(this).hide();
                }
            });
            $("svg").attr("height", 175);
        });
    </script>
}


@*///////////////////////////////////////////////////////////////////////////////////////////*@
<style>
    .bar {
        fill: #593196;
    }
</style>
<script src="https://d3js.org/d3.v5.min.js"></script>

<script>

    var svg = d3.select("svg"),
        margin = 200,
        width = svg.attr("width") - margin,
        height = svg.attr("height") - margin;

    var xScale = d3.scaleBand().range([0, width]).padding(0.4),
        yScale = d3.scaleLinear().range([height, 0]);

    var g = svg.append("g")
        .attr("transform", "translate(" + 55 + "," + 20 + ")");

    var data = @Html.Raw(ViewBag.albums);

    for (var i = 0; i < data.length; i++) {
        var v = "";
        
        var arr = data[i]["title"].toString().split(" ");
        if (arr.length > 1) {
            arr.forEach(function(str) {
                v += str[0];
            });
        } else {
            v = arr[0];
        }
        data[i]["title"] = v;
    }

//    for (item in data) {
//        var v ="";
//        var arr = item["title"].toString().split(" ");
//        if (arr.length > 1) {
//            arr.forEach(function(str) {
//                v += str[0];
//            });
//        } else {
//            v = arr[0];
//        }
//        item.title = v;
//    }

    xScale.domain(data.map(function(d) {
        return d.title;
    }));

    yScale.domain([0, 10]);

    g.append("g")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(xScale))
        .append("text")
        .attr("y", 35)
        .attr("x", 150)
        .attr("text-anchor", "middle")
        .attr("stroke", "black")
        .text("Album Name");

    g.append("g")
        .call(d3.axisLeft(yScale).tickFormat(function(d) {
                return d;
            })
            .ticks(10))
        .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", -25)
        .attr("x", 0)
        .attr("text-anchor", "end")
        .attr("stroke", "black")
        .text("Avg. Score");

    g.selectAll(".bar")
        .data(data)
        .enter().append("rect")
        .attr("class", "bar")
        .attr("x", function(d) { return xScale(d.title); })
        .attr("y", function(d) { return yScale(d.score); })
        .attr("width", xScale.bandwidth())
        .attr("height", function(d) { return height - yScale(d.score); });

</script>